'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _regeneratorRuntime = _interopDefault(require('babel-runtime/regenerator'));
var _asyncToGenerator = _interopDefault(require('babel-runtime/helpers/asyncToGenerator'));
var _classCallCheck = _interopDefault(require('babel-runtime/helpers/classCallCheck'));
var _createClass = _interopDefault(require('babel-runtime/helpers/createClass'));
var axios = _interopDefault(require('axios'));

var CDN_URL = "http://ddragon.leagueoflegends.com/cdn";
var LATEST_PATCH = "10.9.1";
var DEFAULT_LANG = "en_US";
var PRE_REFORGE_PATCH = "7.23.1";

var ITEMS_MAP = {
  "Boots of Speed": ["1001"],
  "Faerie Charm": ["1004"],
  "Rejuvenation Bead": ["1006"],
  "Giant's Belt": ["1011"],
  "Blasting Wand": ["1026"],
  "Sapphire Crystal": ["1027"],
  "Ruby Crystal": ["1028"],
  "Cloth Armor": ["1029"],
  "Chain Vest": ["1031"],
  "Null-Magic Mantle": ["1033"],
  "Long Sword": ["1036"],
  Pickaxe: ["1037"],
  "B. F. Sword": ["1038"],
  "Hunter's Talisman": ["1039"],
  "Hunter's Machete": ["1041"],
  Dagger: ["1042"],
  "Recurve Bow": ["1043"],
  "Brawler's Gloves": ["1051"],
  "Amplifying Tome": ["1052"],
  "Vampiric Scepter": ["1053"],
  "Doran's Shield": ["1054"],
  "Doran's Blade": ["1055"],
  "Doran's Ring": ["1056"],
  "Negatron Cloak": ["1057"],
  "Needlessly Large Rod": ["1058"],
  "Space Vampiric Scepter": ["1059"],
  "The Dark Seal": ["1082"],
  Cull: ["1083"],
  "Enchantment: Warrior": ["1400", "1412", "3671", "4102"],
  "Enchantment: Cinderhulk": ["1401", "1413", "3672", "4103"],
  "Enchantment: Runic Echoes": ["1402", "1414", "3673", "4104"],
  "Enchantment: Bloodrazor": ["1416", "1419", "3675", "4105"],
  "Health Potion": ["2003"],
  "Mana Potion": ["2004"],
  "Total Biscuit of Rejuvenation": ["2009"],
  "Total Biscuit of Everlasting Will": ["2010"],
  "Elixir Of Skill": ["2011"],
  "Looted Biscuit of Rejuvenation": ["2012"],
  "Looted Oracle's Extract": ["2013"],
  "Kircheis Shard": ["2015"],
  "Refillable Potion": ["2031"],
  "Hunter's Potion": ["2032"],
  "Corrupting Potion": ["2033"],
  "Oracle's Extract": ["2047"],
  "Explorer's Ward": ["2050"],
  "Guardian's Horn": ["2051"],
  "Poro-Snax": ["2052"],
  "Raptor Cloak": ["2053"],
  "Diet Poro-Snax": ["2054"],
  "Control Ward": ["2055"],
  "Pilfered Stealth Ward": ["2056"],
  "Peering Farsight Ward": ["2057"],
  "Travel Size Elixir of Iron": ["2058"],
  "Travel Size Elixir of Sorcery": ["2059"],
  "Travel Size Elixir of Wrath": ["2060"],
  "Pilfered Health Potion": ["2061"],
  "Pilfered Potion of Rouge": ["2062"],
  "Shurelya's Reverie": ["2065"],
  "Elixir of Iron": ["2138"],
  "Elixir of Sorcery": ["2139"],
  "Elixir of Wrath": ["2140"],
  "Sly Sack of Gold": ["2319"],
  "Minion Dematerializer": ["2403"],
  "Commencing Stopwatch": ["2419"],
  Stopwatch: ["2420", "2423"],
  "Broken Stopwatch": ["2421", "2424"],
  "Slightly Magical Boots": ["2422"],
  "Abyssal Mask": ["3001"],
  "Archangel's Staff": ["3003"],
  Manamune: ["3004"],
  "Atma's Reckoning": ["3005"],
  "Berserker's Greaves": ["3006"],
  "Archangel's Staff (Quick Charge)": ["3007"],
  "Manamune (Quick Charge)": ["3008"],
  "Boots of Swiftness": ["3009"],
  "Catalyst of Aeons": ["3010"],
  "Sorcerer's Shoes": ["3020"],
  "Frozen Mallet": ["3022"],
  "Glacial Shroud": ["3024"],
  "Iceborn Gauntlet": ["3025"],
  "Guardian Angel": ["3026"],
  "Rod of Ages": ["3027"],
  "Chalice of Harmony": ["3028"],
  "Rod of Ages (Quick Charge)": ["3029"],
  "Hextech GLP-800": ["3030"],
  "Infinity Edge": ["3031"],
  "Mortal Reminder": ["3033"],
  "Last Whisper": ["3035"],
  "Lord Dominik's Regards": ["3036"],
  "Seraph's Embrace": ["3040", "3048"],
  "Mejai's Soulstealer": ["3041"],
  Muramana: ["3042", "3043"],
  Phage: ["3044"],
  "Phantom Dancer": ["3046"],
  "Ninja Tabi": ["3047"],
  "Zeke's Convergence": ["3050"],
  "Jaurim's Fist": ["3052"],
  "Sterak's Gage": ["3053"],
  Ohmwrecker: ["3056"],
  Sheen: ["3057"],
  "Spirit Visage": ["3065"],
  Kindlegem: ["3067"],
  "Sunfire Cape": ["3068"],
  "Remnant of the Ascended": ["3069"],
  "Tear of the Goddess": ["3070"],
  "The Black Cleaver": ["3071"],
  "The Bloodthirster": ["3072"],
  "Tear of the Goddess (Quick Charge)": ["3073"],
  "Ravenous Hydra": ["3074"],
  Thornmail: ["3075"],
  "Bramble Vest": ["3076"],
  Tiamat: ["3077"],
  "Trinity Force": ["3078"],
  "Space Bloodthirster": ["3080"],
  "Warden's Mail": ["3082"],
  "Warmog's Armor": ["3083"],
  "Overlord's Bloodmail": ["3084"],
  "Runaan's Hurricane": ["3085"],
  Zeal: ["3086"],
  "Statikk Shiv": ["3087"],
  "Rabadon's Deathcap": ["3089"],
  "Wooglet's Witchcap": ["3090"],
  "Wit's End": ["3091"],
  "Remnant of the Watchers": ["3092"],
  "Rapid Firecannon": ["3094"],
  Stormrazor: ["3095"],
  "Nomad's Medallion": ["3096"],
  "Targon's Brace": ["3097"],
  Frostfang: ["3098"],
  "Lich Bane": ["3100"],
  Stinger: ["3101"],
  "Banshee's Veil": ["3102"],
  "Lord Van Damm's Pillager": ["3104"],
  "Aegis of the Legion": ["3105"],
  Redemption: ["3107"],
  "Fiendish Codex": ["3108"],
  "Knight's Vow": ["3109"],
  "Frozen Heart": ["3110"],
  "Mercury's Treads": ["3111"],
  "Guardian's Orb": ["3112"],
  "Aether Wisp": ["3113"],
  "Forbidden Idol": ["3114"],
  "Nashor's Tooth": ["3115"],
  "Rylai's Crystal Scepter": ["3116"],
  "Boots of Mobility": ["3117"],
  "Space Knight's Vow": ["3118"],
  "Wicked Hatchet": ["3122"],
  "Executioner's Calling": ["3123"],
  "Guinsoo's Rageblade": ["3124"],
  "Deathfire Grasp": ["3128"],
  "Sword of the Divine": ["3131"],
  "Caulfield's Warhammer": ["3133"],
  "Serrated Dirk": ["3134"],
  "Void Staff": ["3135"],
  "Haunting Guise": ["3136"],
  "Dervish Blade": ["3137"],
  "Mercurial Scimitar": ["3139"],
  "Quicksilver Sash": ["3140"],
  "Youmuu's Ghostblade": ["3142"],
  "Randuin's Omen": ["3143"],
  "Bilgewater Cutlass": ["3144"],
  "Hextech Revolver": ["3145"],
  "Hextech Gunblade": ["3146"],
  "Duskblade of Draktharr": ["3147"],
  "Space Hextech Gunblade": ["3148"],
  "Space Blade of the Ruined King": ["3149"],
  "Liandry's Torment": ["3151"],
  "Hextech Protobelt-01": ["3152"],
  "Blade of the Ruined King": ["3153"],
  Hexdrinker: ["3155"],
  "Maw of Malmortius": ["3156"],
  "Zhonya's Hourglass": ["3157"],
  "Ionian Boots of Lucidity": ["3158"],
  "Spear of Shojin": ["3161"],
  "Space Bilgewater Cutlass": ["3162"],
  "Space Maw of Malmortius": ["3163"],
  Morellonomicon: ["3165"],
  "Moonflair Spellblade": ["3170"],
  Zephyr: ["3172"],
  "Space Boots of Lucidity": ["3173"],
  "Athene's Unholy Grail": ["3174"],
  "Head of Kha'Zix": ["3175", "3410", "3416", "3422", "3455"],
  "Sanguine Blade": ["3181"],
  "Guardian's Hammer": ["3184"],
  "Arcane Sweeper": ["3187", "3348"],
  "Locket of the Iron Solari": ["3190"],
  "Seeker's Armguard": ["3191"],
  "Gargoyle Stoneplate": ["3193"],
  "Adaptive Helm": ["3194"],
  "The Hex Core mk-1": ["3196"],
  "The Hex Core mk-2": ["3197"],
  "Perfect Hex Core": ["3198"],
  "Prototype Hex Core": ["3200"],
  "Spectre's Cowl": ["3211"],
  "Mikael's Crucible": ["3222"],
  "Space Ravenous Hydra": ["3230"],
  "Space Mercurial Scimitar": ["3231"],
  "Luden's Echo": ["3285"],
  "Ancient Coin": ["3301"],
  "Relic Shield": ["3302"],
  "Spellthief's Edge": ["3303"],
  "Timeworn Ancient Coin": ["3304"],
  "Timeworn Nomad's Medallion": ["3305"],
  "Timeworn Talisman of Ascension": ["3306"],
  "Timeworn Relic Shield": ["3307"],
  "Timeworn Targon's Brace": ["3308"],
  "Timeworn Face of the Mountain": ["3309"],
  "Timeworn Spellthief's Edge": ["3310"],
  "Timeworn Frostfang": ["3311"],
  "Timeworn Frost Queen's Claim": ["3312"],
  "Warding Totem (Trinket)": ["3340"],
  "Soul Anchor (Trinket)": ["3345"],
  "Greater Stealth Totem (Trinket)": ["3361"],
  "Greater Vision Totem (Trinket)": ["3362"],
  "Farsight Alteration": ["3363"],
  "Oracle Lens": ["3364"],
  "Molten Edge": ["3371"],
  "Forgefire Cape": ["3373"],
  "Rabadon's Deathcrown": ["3374"],
  "Infernal Mask": ["3379"],
  "The Obsidian Cleaver": ["3380"],
  Salvation: ["3382"],
  "Circlet of the Iron Solari": ["3383"],
  "Trinity Fusion": ["3384"],
  "Wooglet's Witchcrown": ["3385"],
  "Zhonya's Paradox": ["3386"],
  "'Your Cut'": ["3400"],
  "Remnant of the Aspect": ["3401"],
  "Golden Transcendence": ["3460"],
  "Golden Transcendence (Disabled)": ["3461"],
  "Seer Stone (Trinket)": ["3462", "3645"],
  "Ardent Censer": ["3504"],
  "Essence Reaver": ["3508"],
  "Zz'Rot Portal": ["3512"],
  "Eye of the Herald": ["3513", "3514"],
  "Ghost Poro": ["3520"],
  "The Black Spear": ["3599"],
  "Siege Teleport": ["3630", "3633"],
  "Siege Ballista": ["3631"],
  "Tower: Beam of Ruination": ["3634"],
  "Port Pad": ["3635"],
  "Tower: Storm Bulwark": ["3636"],
  "Nexus Siege: Siege Weapon Slot": ["3637"],
  "Flash Zone": ["3640"],
  "Vanguard Banner": ["3641"],
  "Siege Refund": ["3642"],
  "Entropy Field": ["3643"],
  "Shield Totem": ["3647"],
  "Siege Teleport (Inactive)": ["3648"],
  "Siege Sight Warder": ["3649"],
  "Frosted Snax": ["3680"],
  "Super Spicy Snax": ["3681"],
  "Espresso Snax": ["3682"],
  "Rainbow Snax Party Pack!": ["3683"],
  "Cosmic Shackle": ["3690"],
  "Singularity Lantern": ["3691"],
  "Dark Matter Scythe": ["3692"],
  "Gravity Boots": ["3693"],
  "Cloak of Stars": ["3694"],
  "Dark Star Sigil": ["3695"],
  "Stalker's Blade": ["3706"],
  "Skirmisher's Sabre": ["3715"],
  "Dead Man's Plate": ["3742"],
  "Titanic Hydra": ["3748"],
  "Bami's Cinder": ["3751"],
  "Righteous Glory": ["3800"],
  "Crystalline Bracer": ["3801"],
  "Lost Chapter": ["3802"],
  "Death's Dance": ["3812"],
  "Space Death's Dance": ["3813"],
  "Edge of Night": ["3814"],
  "Fire at Will": ["3901"],
  "Death's Daughter": ["3902"],
  "Raise Morale": ["3903"],
  "Twin Shadows": ["3905"],
  Spellbinder: ["3907"],
  "Oblivion Orb": ["3916"],
  "Ghostwalkers (Melee Only)": ["4001"],
  Lifeline: ["4003"],
  "Spectral Cutlass": ["4004"],
  "Pridestalker's Blade": ["4101"],
  "Doran's Lost Shield": ["4201"],
  "Doran's Lost Blade": ["4202"],
  "Doran's Lost Ring": ["4203"],
  "Doran's Lost Idol": ["4204"],
  "Philosopher's Medallion": ["4301"],
  "Heart of Targon": ["4302"],
  "Force of Nature": ["4401"],
  "Innervating Locket": ["4402"],
  "Stat-Stick of Stoicism": ["4403"]
};

var RUNES_MAP = {
  "Lesser Mark of Attack Damage": ["5001"],
  "Lesser Mark of Scaling Attack Damage": ["5002"],
  "Lesser Mark of Attack Speed": ["5003"],
  "Lesser Mark of Critical Damage": ["5005"],
  "Lesser Mark of Critical Chance": ["5007"],
  "Lesser Mark of Lethality": ["5009"],
  "Lesser Mark of Health": ["5011"],
  "Lesser Mark of Scaling Health": ["5012"],
  "Lesser Mark of Armor": ["5013"],
  "Lesser Mark of Magic Resist": ["5015"],
  "Lesser Mark of Scaling Magic Resist": ["5016"],
  "Lesser Mark of Cooldown Reduction": ["5021"],
  "Lesser Mark of Ability Power": ["5023"],
  "Lesser Mark of Scaling Ability Power": ["5024"],
  "Lesser Mark of Mana": ["5025"],
  "Lesser Mark of Scaling Mana": ["5026"],
  "Lesser Mark of Mana Regeneration": ["5027"],
  "Lesser Mark of Magic Penetration": ["5029"],
  "Lesser Glyph of Attack Damage": ["5031"],
  "Lesser Glyph of Scaling Attack Damage": ["5032"],
  "Lesser Glyph of Attack Speed": ["5033"],
  "Lesser Glyph of Critical Damage": ["5035"],
  "Lesser Glyph of Critical Chance": ["5037"],
  "Lesser Glyph of Health": ["5041"],
  "Lesser Glyph of Scaling Health": ["5042"],
  "Lesser Glyph of Armor": ["5043"],
  "Lesser Glyph of Magic Resist": ["5045"],
  "Lesser Glyph of Scaling Magic Resist": ["5046"],
  "Lesser Glyph of Health Regeneration": ["5047"],
  "Lesser Glyph of Cooldown Reduction": ["5051"],
  "Lesser Glyph of Scaling Cooldown Reduction": ["5052"],
  "Lesser Glyph of Ability Power": ["5053"],
  "Lesser Glyph of Scaling Ability Power": ["5054"],
  "Lesser Glyph of Mana": ["5055"],
  "Lesser Glyph of Scaling Mana": ["5056"],
  "Lesser Glyph of Mana Regeneration": ["5057"],
  "Lesser Glyph of Scaling Mana Regeneration": ["5058"],
  "Lesser Glyph of Magic Penetration": ["5059"],
  "Lesser Seal of Attack Damage": ["5061"],
  "Lesser Seal of Scaling Attack Damage": ["5062"],
  "Lesser Seal of Attack Speed": ["5063"],
  "Lesser Seal of Critical Damage": ["5065"],
  "Lesser Seal of Critical Chance": ["5067"],
  "Lesser Seal of Health": ["5071"],
  "Lesser Seal of Scaling Health": ["5072"],
  "Lesser Seal of Armor": ["5073"],
  "Lesser Seal of Scaling Armor": ["5074"],
  "Lesser Seal of Magic Resist": ["5075"],
  "Lesser Seal of Scaling Magic Resist": ["5076"],
  "Lesser Seal of Health Regeneration": ["5077"],
  "Lesser Seal of Scaling Health Regeneration": ["5078"],
  "Lesser Seal of Cooldown Reduction": ["5081"],
  "Lesser Seal of Ability Power": ["5083"],
  "Lesser Seal of Scaling Ability Power": ["5084"],
  "Lesser Seal of Mana": ["5085"],
  "Lesser Seal of Scaling Mana": ["5086"],
  "Lesser Seal of Mana Regeneration": ["5087"],
  "Lesser Seal of Scaling Mana Regeneration": ["5088"],
  "Lesser Quintessence of Attack Damage": ["5091"],
  "Lesser Quintessence of Scaling Attack Damage": ["5092"],
  "Lesser Quintessence of Attack Speed": ["5093"],
  "Lesser Quintessence of Critical Damage": ["5095"],
  "Lesser Quintessence of Critical Chance": ["5097"],
  "Lesser Quintessence of Lethality": ["5099"],
  "Lesser Quintessence of Health": ["5101"],
  "Lesser Quintessence of Scaling Health": ["5102"],
  "Lesser Quintessence of Armor": ["5103"],
  "Lesser Quintessence of Scaling Armor": ["5104"],
  "Lesser Quintessence of Magic Resist": ["5105"],
  "Lesser Quintessence of Scaling Magic Resist": ["5106"],
  "Lesser Quintessence of Health Regeneration": ["5107"],
  "Lesser Quintessence of Scaling Health Regeneration": ["5108"],
  "Lesser Quintessence of Cooldown Reduction": ["5111"],
  "Lesser Quintessence of Scaling Cooldown Reduction": ["5112"],
  "Lesser Quintessence of Ability Power": ["5113"],
  "Lesser Quintessence of Scaling Ability Power": ["5114"],
  "Lesser Quintessence of Mana": ["5115"],
  "Lesser Quintessence of Scaling Mana": ["5116"],
  "Lesser Quintessence of Mana Regeneration": ["5117"],
  "Lesser Quintessence of Scaling Mana Regeneration": ["5118"],
  "Lesser Quintessence of Magic Penetration": ["5119"],
  "Lesser Quintessence of Movement Speed": ["5121"],
  "Mark of Attack Damage": ["5123"],
  "Mark of Scaling Attack Damage": ["5124"],
  "Mark of Attack Speed": ["5125"],
  "Mark of Critical Damage": ["5127"],
  "Mark of Critical Chance": ["5129"],
  "Mark of Lethality": ["5131"],
  "Mark of Health": ["5133"],
  "Mark of Scaling Health": ["5134"],
  "Mark of Armor": ["5135"],
  "Mark of Magic Resist": ["5137"],
  "Mark of Scaling Magic Resist": ["5138"],
  "Mark of Cooldown Reduction": ["5143"],
  "Mark of Ability Power": ["5145"],
  "Mark of Scaling Ability Power": ["5146"],
  "Mark of Mana": ["5147"],
  "Mark of Scaling Mana": ["5148"],
  "Mark of Mana Regeneration": ["5149"],
  "Mark of Magic Penetration": ["5151"],
  "Glyph of Attack Damage": ["5153"],
  "Glyph of Scaling Attack Damage": ["5154"],
  "Glyph of Attack Speed": ["5155"],
  "Glyph of Critical Damage": ["5157"],
  "Glyph of Critical Chance": ["5159"],
  "Glyph of Health": ["5163"],
  "Glyph of Scaling Health": ["5164"],
  "Glyph of Armor": ["5165"],
  "Glyph of Magic Resist": ["5167"],
  "Glyph of Scaling Magic Resist": ["5168"],
  "Glyph of Health Regeneration": ["5169"],
  "Glyph of Cooldown Reduction": ["5173"],
  "Glyph of Scaling Cooldown Reduction": ["5174"],
  "Glyph of Ability Power": ["5175"],
  "Glyph of Scaling Ability Power": ["5176"],
  "Glyph of Mana": ["5177"],
  "Glyph of Scaling Mana": ["5178"],
  "Glyph of Mana Regeneration": ["5179"],
  "Glyph of Scaling Mana Regeneration": ["5180"],
  "Glyph of Magic Penetration": ["5181"],
  "Seal of Attack Damage": ["5183"],
  "Seal of Scaling Attack Damage": ["5184"],
  "Seal of Attack Speed": ["5185"],
  "Seal of Critical Damage": ["5187"],
  "Seal of Critical Chance": ["5189"],
  "Seal of Health": ["5193"],
  "Seal of Scaling Health": ["5194"],
  "Seal of Armor": ["5195"],
  "Seal of Scaling Armor": ["5196"],
  "Seal of Magic Resist": ["5197"],
  "Seal of Scaling Magic Resist": ["5198"],
  "Seal of Health Regeneration": ["5199"],
  "Seal of Scaling Health Regeneration": ["5200"],
  "Seal of Cooldown Reduction": ["5203"],
  "Seal of Ability Power": ["5205"],
  "Seal of Scaling Ability Power": ["5206"],
  "Seal of Mana": ["5207"],
  "Seal of Scaling Mana": ["5208"],
  "Seal of Mana Regeneration": ["5209"],
  "Seal of Scaling Mana Regeneration": ["5210"],
  "Quintessence of Attack Damage": ["5213"],
  "Quintessence of Scaling Attack Damage": ["5214"],
  "Quintessence of Attack Speed": ["5215"],
  "Quintessence of Critical Damage": ["5217"],
  "Quintessence of Critical Chance": ["5219"],
  "Quintessence of Lethality": ["5221"],
  "Quintessence of Health": ["5223"],
  "Quintessence of Scaling Health": ["5224"],
  "Quintessence of Armor": ["5225"],
  "Quintessence of Scaling Armor": ["5226"],
  "Quintessence of Magic Resist": ["5227"],
  "Quintessence of Scaling Magic Resist": ["5228"],
  "Quintessence of Health Regeneration": ["5229"],
  "Quintessence of Scaling Health Regeneration": ["5230"],
  "Quintessence of Cooldown Reduction": ["5233"],
  "Quintessence of Scaling Cooldown Reduction": ["5234"],
  "Quintessence of Ability Power": ["5235"],
  "Quintessence of Scaling Ability Power": ["5236"],
  "Quintessence of Mana": ["5237"],
  "Quintessence of Scaling Mana": ["5238"],
  "Quintessence of Mana Regeneration": ["5239"],
  "Quintessence of Scaling Mana Regeneration": ["5240"],
  "Quintessence of Magic Penetration": ["5241"],
  "Quintessence of Movement Speed": ["5243"],
  "Greater Mark of Attack Damage": ["5245"],
  "Greater Mark of Scaling Attack Damage": ["5246"],
  "Greater Mark of Attack Speed": ["5247"],
  "Greater Mark of Critical Damage": ["5249"],
  "Greater Mark of Critical Chance": ["5251"],
  "Greater Mark of Lethality": ["5253"],
  "Greater Mark of Health": ["5255"],
  "Greater Mark of Scaling Health": ["5256"],
  "Greater Mark of Armor": ["5257"],
  "Greater Mark of Magic Resist": ["5259"],
  "Greater Mark of Scaling Magic Resist": ["5260"],
  "Greater Mark of Cooldown Reduction": ["5265"],
  "Greater Mark of Ability Power": ["5267"],
  "Greater Mark of Scaling Ability Power": ["5268"],
  "Greater Mark of Mana": ["5269"],
  "Greater Mark of Scaling Mana": ["5270"],
  "Greater Mark of Mana Regeneration": ["5271"],
  "Greater Mark of Magic Penetration": ["5273"],
  "Greater Glyph of Attack Damage": ["5275"],
  "Greater Glyph of Scaling Attack Damage": ["5276"],
  "Greater Glyph of Attack Speed": ["5277"],
  "Greater Glyph of Critical Damage": ["5279"],
  "Greater Glyph of Critical Chance": ["5281"],
  "Greater Glyph of Health": ["5285"],
  "Greater Glyph of Scaling Health": ["5286"],
  "Greater Glyph of Armor": ["5287"],
  "Greater Glyph of Magic Resist": ["5289"],
  "Greater Glyph of Scaling Magic Resist": ["5290"],
  "Greater Glyph of Health Regeneration": ["5291"],
  "Greater Glyph of Cooldown Reduction": ["5295"],
  "Greater Glyph of Scaling Cooldown Reduction": ["5296"],
  "Greater Glyph of Ability Power": ["5297"],
  "Greater Glyph of Scaling Ability Power": ["5298"],
  "Greater Glyph of Mana": ["5299"],
  "Greater Glyph of Scaling Mana": ["5300"],
  "Greater Glyph of Mana Regeneration": ["5301"],
  "Greater Glyph of Scaling Mana Regeneration": ["5302"],
  "Greater Glyph of Magic Penetration": ["5303"],
  "Greater Seal of Attack Damage": ["5305"],
  "Greater Seal of Scaling Attack Damage": ["5306"],
  "Greater Seal of Attack Speed": ["5307"],
  "Greater Seal of Critical Damage": ["5309"],
  "Greater Seal of Critical Chance": ["5311"],
  "Greater Seal of Health": ["5315"],
  "Greater Seal of Scaling Health": ["5316"],
  "Greater Seal of Armor": ["5317"],
  "Greater Seal of Scaling Armor": ["5318"],
  "Greater Seal of Magic Resist": ["5319"],
  "Greater Seal of Scaling Magic Resist": ["5320"],
  "Greater Seal of Health Regeneration": ["5321"],
  "Greater Seal of Scaling Health Regeneration": ["5322"],
  "Greater Seal of Cooldown Reduction": ["5325"],
  "Greater Seal of Ability Power": ["5327"],
  "Greater Seal of Scaling Ability Power": ["5328"],
  "Greater Seal of Mana": ["5329"],
  "Greater Seal of Scaling Mana": ["5330"],
  "Greater Seal of Mana Regeneration": ["5331"],
  "Greater Seal of Scaling Mana Regeneration": ["5332"],
  "Greater Quintessence of Attack Damage": ["5335"],
  "Greater Quintessence of Scaling Attack Damage": ["5336"],
  "Greater Quintessence of Attack Speed": ["5337"],
  "Greater Quintessence of Critical Damage": ["5339"],
  "Greater Quintessence of Critical Chance": ["5341"],
  "Greater Quintessence of Lethality": ["5343"],
  "Greater Quintessence of Health": ["5345"],
  "Greater Quintessence of Scaling Health": ["5346"],
  "Greater Quintessence of Armor": ["5347"],
  "Greater Quintessence of Scaling Armor": ["5348"],
  "Greater Quintessence of Magic Resist": ["5349"],
  "Greater Quintessence of Scaling Magic Resist": ["5350"],
  "Greater Quintessence of Health Regeneration": ["5351"],
  "Greater Quintessence of Scaling Health Regeneration": ["5352"],
  "Greater Quintessence of Cooldown Reduction": ["5355"],
  "Greater Quintessence of Scaling Cooldown Reduction": ["5356"],
  "Greater Quintessence of Ability Power": ["5357"],
  "Greater Quintessence of Scaling Ability Power": ["5358"],
  "Greater Quintessence of Mana": ["5359"],
  "Greater Quintessence of Scaling Mana": ["5360"],
  "Greater Quintessence of Mana Regeneration": ["5361"],
  "Greater Quintessence of Scaling Mana Regeneration": ["5362"],
  "Greater Quintessence of Magic Penetration": ["5363"],
  "Greater Quintessence of Movement Speed": ["5365"],
  "Greater Quintessence of Revival": ["5366"],
  "Greater Quintessence of Gold": ["5367"],
  "Greater Quintessence of Experience": ["5368"],
  "Greater Seal of Energy Regeneration": ["5369"],
  "Greater Seal of Scaling Energy Regeneration": ["5370"],
  "Greater Glyph of Energy": ["5371"],
  "Greater Glyph of Scaling Energy": ["5372"],
  "Greater Quintessence of Energy Regeneration": ["5373"],
  "Greater Quintessence of Energy": ["5374"],
  "Lesser Mark of Precision": ["5400"],
  "Mark of Precision": ["5401"],
  "Greater Mark of Precision": ["5402"],
  "Greater Seal of Gold": ["5403"],
  "Lesser Quintessence of Percent Health": ["5404"],
  "Quintessence of Percent Health": ["5405"],
  "Greater Quintessence of Percent Health": ["5406"],
  "Lesser Quintessence of Spell Vamp": ["5407"],
  "Quintessence of Spell Vamp": ["5408"],
  "Greater Quintessence of Spell Vamp": ["5409"],
  "Lesser Quintessence of Life Steal": ["5410"],
  "Quintessence of Life Steal": ["5411"],
  "Greater Quintessence of Life Steal": ["5412"],
  "Lesser Seal of Percent Health": ["5413"],
  "Seal of Percent Health": ["5414"],
  "Greater Seal of Percent Health": ["5415"],
  "Lesser Quintessence of Precision": ["5416"],
  "Quintessence of Precision": ["5417"],
  "Greater Quintessence of Precision": ["5418"],
  "Mark of the Crippling Candy Cane": ["8001"],
  "Lesser Mark of the Yuletide Tannenbaum ": ["8002"],
  "Glyph of the Special Stocking": ["8003"],
  "Lesser Glyph of the Gracious Gift": ["8005"],
  "Lesser Seal of the Stout Snowman": ["8006"],
  "Lesser Mark of Alpine Attack Speed": ["8007"],
  "Mark of the Combatant": ["8008"],
  "Lesser Seal of the Medalist": ["8009"],
  "Lesser Glyph of the Challenger": ["8011"],
  "Glyph of the Soaring Slalom": ["8012"],
  "Quintessence of the Headless Horseman": ["8013"],
  "Quintessence of the Piercing Screech": ["8014"],
  "Quintessence of Bountiful Treats": ["8015"],
  "Quintessence of the Speedy Specter": ["8016"],
  "Quintessence of the Witches Brew": ["8017"],
  "Greater Quintessence of the Piercing Present": ["8019"],
  "Greater Quintessence of the Deadly Wreath": ["8020"],
  "Greater Quintessence of Frosty Health": ["8021"],
  "Greater Quintessence of Sugar Rush": ["8022"],
  "Greater Quintessence of Studio Rumble": ["8035"],
  "Razer Mark of Precision": ["10001"],
  "Razer Quintessence of Speed": ["10002"]
};

var MASTERIES_MAP = {
  Fury: ["6111"],
  Sorcery: ["6114"],
  "Fresh Blood": ["6121"],
  Feast: ["6122"],
  "Expose Weakness": ["6123"],
  Vampirism: ["6131"],
  "Natural Talent": ["6134"],
  "Bounty Hunter": ["6141"],
  "Double Edged Sword": ["6142"],
  "Battle Trance": ["6143"],
  "Battering Blows": ["6151"],
  "Piercing Thoughts": ["6154"],
  "Warlord's Bloodlust": ["6161"],
  "Fervor of Battle": ["6162"],
  "Deathfire Touch": ["6164"],
  Recovery: ["6211"],
  Unyielding: ["6212"],
  Explorer: ["6221"],
  Siegemaster: ["6222"],
  "Tough Skin": ["6223"],
  "Runic Armor": ["6231"],
  "Veteran's Scars": ["6232"],
  Insight: ["6241"],
  Perseverance: ["6242"],
  Fearless: ["6243"],
  Swiftness: ["6251"],
  "Legendary Guardian": ["6252"],
  "Grasp of the Undying": ["6261"],
  "Courage of the Colossus": ["6262"],
  "Stoneborn Pact": ["6263"],
  Wanderer: ["6311"],
  Savagery: ["6312"],
  "Runic Affinity": ["6321"],
  "Secret Stash": ["6322"],
  Assassin: ["6323"],
  Merciless: ["6331"],
  Meditation: ["6332"],
  "Greenfather's Gift": ["6341"],
  Bandit: ["6342"],
  "Dangerous Game": ["6343"],
  Precision: ["6351"],
  Intelligence: ["6352"],
  "Stormraider's Surge": ["6361"],
  "Thunderlord's Decree": ["6362"],
  "Windspeaker's Blessing": ["6363"]
};

var SUMMONERS_MAP = {
  Barrier: ["SummonerBarrier"],
  Cleanse: ["SummonerBoost"],
  "Disabled Summoner Spells": ["SummonerDarkStarChampSelect1", "SummonerDarkStarChampSelect2"],
  Ignite: ["SummonerDot"],
  Exhaust: ["SummonerExhaust"],
  Flash: ["SummonerFlash"],
  Ghost: ["SummonerHaste", "SummonerOdysseyGhost"],
  Heal: ["SummonerHeal"],
  Clarity: ["SummonerMana"],
  Warp: ["SummonerOdysseyFlash"],
  Resuscitate: ["SummonerOdysseyRevive"],
  "To the King!": ["SummonerPoroRecall"],
  "Poro Toss": ["SummonerPoroThrow"],
  "Nexus Siege: Siege Weapon Slot": ["SummonerSiegeChampSelect1", "SummonerSiegeChampSelect2"],
  Smite: ["SummonerSmite"],
  "Ultra (Rapidly Flung) Mark": ["SummonerSnowURFSnowball_Mark"],
  Mark: ["SummonerSnowball"],
  Teleport: ["SummonerTeleport"]
};

var normalizeChampion = function normalizeChampion(champion, imageCdnUrl) {
  champion.spriteCss = {
    "background-image": "url('" + imageCdnUrl + "/sprite/" + champion.image.sprite + "')",
    "background-position": champion.image.x * -1 + "px " + champion.image.y * -1 + "px",
    width: champion.image.w + "px",
    height: champion.image.h + "px"
  };

  champion.imageUrl = imageCdnUrl + "/champion/" + champion.image.full;
  champion.description = champion.blurb;
  delete champion.blurb;
  delete champion.version;

  return champion;
};

var normalizeItem = function normalizeItem(item, itemId) {
  item.id = itemId;
  delete item.colloq;

  return item;
};

var normalizeRune = function normalizeRune(rune, runeId) {
  rune.id = runeId;
  delete rune.colloq;
  delete rune.plaintext;

  return rune;
};

var normalizeMastery = function normalizeMastery(mastery) {
  delete mastery.prereq;

  return mastery;
};

var normalizeSummoner = function normalizeSummoner(summoner) {
  delete summoner.resource;

  return summoner;
};

var RiotLoL = function () {
  function RiotLoL() {
    _classCallCheck(this, RiotLoL);

    this.config();
  }

  _createClass(RiotLoL, [{
    key: "config",
    value: function config() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        patchVersion: LATEST_PATCH,
        language: DEFAULT_LANG,
        preReforgePatchVersion: PRE_REFORGE_PATCH
      },
          _ref$patchVersion = _ref.patchVersion,
          patchVersion = _ref$patchVersion === undefined ? LATEST_PATCH : _ref$patchVersion,
          _ref$language = _ref.language,
          language = _ref$language === undefined ? DEFAULT_LANG : _ref$language,
          _ref$preReforgePatchV = _ref.preReforgePatchVersion,
          preReforgePatchVersion = _ref$preReforgePatchV === undefined ? PRE_REFORGE_PATCH : _ref$preReforgePatchV;

      this.dataCdnUrl = CDN_URL + "/" + patchVersion + "/data/" + language;
      this.imageCdnUrl = CDN_URL + "/" + patchVersion + "/img";
      this.preReforgeDataCdnUrl = CDN_URL + "/" + preReforgePatchVersion + "/data/" + language;
    }
  }, {
    key: "getChampions",
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var _this = this;

        var response, championsMap;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return axios({
                  method: "get",
                  url: this.dataCdnUrl + "/champion.json"
                });

              case 3:
                response = _context.sent;
                championsMap = response.data.data;
                return _context.abrupt("return", Object.keys(championsMap).map(function (name) {
                  return normalizeChampion(championsMap[name], _this.imageCdnUrl);
                }));

              case 8:
                _context.prev = 8;
                _context.t0 = _context["catch"](0);
                throw _context.t0;

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 8]]);
      }));

      function getChampions() {
        return _ref2.apply(this, arguments);
      }

      return getChampions;
    }()
  }, {
    key: "getChampion",
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(champion) {
        var response;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                _context2.next = 3;
                return axios({
                  method: "get",
                  url: this.dataCdnUrl + "/champion/" + champion + ".json"
                });

              case 3:
                response = _context2.sent;
                return _context2.abrupt("return", normalizeChampion(response.data.data[champion], this.imageCdnUrl));

              case 7:
                _context2.prev = 7;
                _context2.t0 = _context2["catch"](0);
                throw _context2.t0;

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[0, 7]]);
      }));

      function getChampion(_x2) {
        return _ref3.apply(this, arguments);
      }

      return getChampion;
    }()
  }, {
    key: "getItems",
    value: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var response, itemsMap;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.prev = 0;
                _context3.next = 3;
                return axios({
                  method: "get",
                  url: this.dataCdnUrl + "/item.json"
                });

              case 3:
                response = _context3.sent;
                itemsMap = response.data.data;
                return _context3.abrupt("return", Object.keys(itemsMap).map(function (id) {
                  return normalizeItem(itemsMap[id], id);
                }));

              case 8:
                _context3.prev = 8;
                _context3.t0 = _context3["catch"](0);
                throw _context3.t0;

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[0, 8]]);
      }));

      function getItems() {
        return _ref4.apply(this, arguments);
      }

      return getItems;
    }()
  }, {
    key: "getItem",
    value: function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(item) {
        var response, itemsMap, itemId;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.prev = 0;
                _context4.next = 3;
                return axios({
                  method: "get",
                  url: this.dataCdnUrl + "/item.json"
                });

              case 3:
                response = _context4.sent;
                itemsMap = response.data.data;

                if (!Object.keys(ITEMS_MAP).includes(item)) {
                  _context4.next = 12;
                  break;
                }

                itemId = ITEMS_MAP[item][0];

                if (!(ITEMS_MAP[item].length === 1)) {
                  _context4.next = 11;
                  break;
                }

                return _context4.abrupt("return", normalizeItem(itemsMap[itemId], itemId));

              case 11:
                return _context4.abrupt("return", ITEMS_MAP[item].map(function (id) {
                  return normalizeItem(itemsMap[id], id);
                }));

              case 12:
                throw new Error("Item could not be found");

              case 15:
                _context4.prev = 15;
                _context4.t0 = _context4["catch"](0);
                throw _context4.t0;

              case 18:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this, [[0, 15]]);
      }));

      function getItem(_x3) {
        return _ref5.apply(this, arguments);
      }

      return getItem;
    }()
  }, {
    key: "getRunes",
    value: function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
        var response, runesMap;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.prev = 0;
                _context5.next = 3;
                return axios({
                  method: "get",
                  url: this.preReforgeDataCdnUrl + "/rune.json"
                });

              case 3:
                response = _context5.sent;
                runesMap = response.data.data;
                return _context5.abrupt("return", Object.keys(runesMap).map(function (id) {
                  return normalizeRune(runesMap[id], id);
                }));

              case 8:
                _context5.prev = 8;
                _context5.t0 = _context5["catch"](0);
                throw _context5.t0;

              case 11:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this, [[0, 8]]);
      }));

      function getRunes() {
        return _ref6.apply(this, arguments);
      }

      return getRunes;
    }()
  }, {
    key: "getRune",
    value: function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(rune) {
        var response, runesMap, runeId;
        return _regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.prev = 0;
                _context6.next = 3;
                return axios({
                  method: "get",
                  url: this.preReforgeDataCdnUrl + "/rune.json"
                });

              case 3:
                response = _context6.sent;
                runesMap = response.data.data;

                if (!Object.keys(RUNES_MAP).includes(rune)) {
                  _context6.next = 8;
                  break;
                }

                runeId = RUNES_MAP[rune][0];
                return _context6.abrupt("return", normalizeRune(runesMap[runeId], runeId));

              case 8:
                throw new Error("Rune could not be found");

              case 11:
                _context6.prev = 11;
                _context6.t0 = _context6["catch"](0);
                throw _context6.t0;

              case 14:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this, [[0, 11]]);
      }));

      function getRune(_x4) {
        return _ref7.apply(this, arguments);
      }

      return getRune;
    }()
  }, {
    key: "getMasteries",
    value: function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
        var response, masteriesMap;
        return _regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.prev = 0;
                _context7.next = 3;
                return axios({
                  method: "get",
                  url: this.preReforgeDataCdnUrl + "/mastery.json"
                });

              case 3:
                response = _context7.sent;
                masteriesMap = response.data.data;
                return _context7.abrupt("return", Object.keys(masteriesMap).map(function (id) {
                  return normalizeMastery(masteriesMap[id]);
                }));

              case 8:
                _context7.prev = 8;
                _context7.t0 = _context7["catch"](0);
                throw _context7.t0;

              case 11:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this, [[0, 8]]);
      }));

      function getMasteries() {
        return _ref8.apply(this, arguments);
      }

      return getMasteries;
    }()
  }, {
    key: "getMastery",
    value: function () {
      var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(mastery) {
        var response, masteriesMap, masteryId;
        return _regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.prev = 0;
                _context8.next = 3;
                return axios({
                  method: "get",
                  url: this.preReforgeDataCdnUrl + "/mastery.json"
                });

              case 3:
                response = _context8.sent;
                masteriesMap = response.data.data;

                if (!Object.keys(MASTERIES_MAP).includes(mastery)) {
                  _context8.next = 8;
                  break;
                }

                masteryId = MASTERIES_MAP[mastery][0];
                return _context8.abrupt("return", normalizeMastery(masteriesMap[masteryId]));

              case 8:
                throw new Error("The " + mastery + " mastery could not be found.");

              case 11:
                _context8.prev = 11;
                _context8.t0 = _context8["catch"](0);
                throw _context8.t0;

              case 14:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this, [[0, 11]]);
      }));

      function getMastery(_x5) {
        return _ref9.apply(this, arguments);
      }

      return getMastery;
    }()
  }, {
    key: "getSummoners",
    value: function () {
      var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
        var response, summonersMap;
        return _regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.prev = 0;
                _context9.next = 3;
                return axios({
                  method: "get",
                  url: this.dataCdnUrl + "/summoner.json"
                });

              case 3:
                response = _context9.sent;
                summonersMap = response.data.data;
                return _context9.abrupt("return", Object.keys(summonersMap).map(function (id) {
                  return normalizeSummoner(summonersMap[id]);
                }));

              case 8:
                _context9.prev = 8;
                _context9.t0 = _context9["catch"](0);
                throw _context9.t0;

              case 11:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this, [[0, 8]]);
      }));

      function getSummoners() {
        return _ref10.apply(this, arguments);
      }

      return getSummoners;
    }()
  }, {
    key: "getSummoner",
    value: function () {
      var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(summoner) {
        var response, summonersMap;
        return _regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.prev = 0;
                _context10.next = 3;
                return axios({
                  method: "get",
                  url: this.dataCdnUrl + "/summoner.json"
                });

              case 3:
                response = _context10.sent;
                summonersMap = response.data.data;

                if (!Object.keys(SUMMONERS_MAP).includes(summoner)) {
                  _context10.next = 11;
                  break;
                }

                if (!(SUMMONERS_MAP[summoner].length === 1)) {
                  _context10.next = 10;
                  break;
                }

                return _context10.abrupt("return", normalizeSummoner(summonersMap[SUMMONERS_MAP[summoner][0]]));

              case 10:
                return _context10.abrupt("return", SUMMONERS_MAP[summoner].map(function (id) {
                  return normalizeSummoner(summonersMap[id]);
                }));

              case 11:
                throw new Error("The " + summoner + " summoner spell could not be found.");

              case 14:
                _context10.prev = 14;
                _context10.t0 = _context10["catch"](0);
                throw _context10.t0;

              case 17:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this, [[0, 14]]);
      }));

      function getSummoner(_x6) {
        return _ref11.apply(this, arguments);
      }

      return getSummoner;
    }()
  }]);

  return RiotLoL;
}();

var index = new RiotLoL();

module.exports = index;
